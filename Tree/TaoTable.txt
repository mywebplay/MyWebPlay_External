<style>
    body {
      font-family: Arial, sans-serif;
      padding: 20px;
    }
    input[type="text"] {
      padding: 5px;
      width: 300px;
      margin-bottom: 10px;
    }
    table {
      border-collapse: collapse;
      width: 100%;
    }
    th, td {
      border: 1px solid #ccc;
      padding: 8px;
      text-align: left;
    }
    th:nth-child(1),
    td:nth-child(1) {
      width: 5%;
      text-align: center;
    }
    tr.hide {
      display: none;
    }
  </style>
</head>
<body>

<h2>Dữ liệu bảng</h2>
<input type="text" id="searchInput" placeholder="Tìm kiếm (regex hỗ trợ ^abc, abc$, v.v.)">

<table id="tableX">
  <thead></thead>
  <tbody></tbody>
</table>

<script>
  function generateTableFromLocalStorage() {
    const raw = localStorage.getItem("tableX");
    if (!raw) {
      alert("Không tìm thấy dữ liệu trong localStorage!");
      return;
    }

    let data;
    try {
      data = JSON.parse(raw);
      if (!Array.isArray(data) || data.length === 0) throw "Dữ liệu không hợp lệ";
    } catch (e) {
      alert("Dữ liệu JSON không hợp lệ!");
      return;
    }

    const table = document.getElementById("tableX");
    const thead = table.querySelector("thead");
    const tbody = table.querySelector("tbody");
    thead.innerHTML = "";
    tbody.innerHTML = "";

    // Tạo tiêu đề bảng (có STT)
    const headers = Object.keys(data[0]);
    const headerRow = document.createElement("tr");
    headerRow.innerHTML = `<th>STT</th>` + headers.map(h => `<th>${h}</th>`).join("");
    thead.appendChild(headerRow);

    // Tạo hàng dữ liệu
    data.forEach((row, index) => {
      const tr = document.createElement("tr");
      tr.innerHTML = `<td>${index + 1}</td>` + headers.map(h => `<td>${row[h]}</td>`).join("");
      tbody.appendChild(tr);
    });

    // Xoá dữ liệu khỏi localStorage
    localStorage.removeItem("tableX");
  }

  function filterTableRegex() {
    const input = document.getElementById("searchInput").value.trim();
    const table = document.getElementById("tableX");
    const tbody = table.querySelector("tbody");
    const rows = tbody.querySelectorAll("tr");

    let regex;
    try {
      regex = new RegExp(input, "i"); // Không phân biệt hoa thường
    } catch (e) {
      rows.forEach(row => row.classList.remove("hide"));
      return;
    }

    rows.forEach((row, index) => {
      const cells = row.querySelectorAll("td");
      let matched = false;

      // Bỏ qua cột STT (ô đầu tiên)
      for (let i = 1; i < cells.length; i++) {
        if (regex.test(cells[i].textContent)) {
          matched = true;
          break;
        }
      }

      row.classList.toggle("hide", !matched);
    });

    // Đánh lại STT chỉ cho hàng hiển thị
    let newIndex = 1;
    rows.forEach(row => {
      if (!row.classList.contains("hide")) {
        row.querySelector("td").textContent = newIndex++;
      }
    });
  }

  // Khởi tạo
  generateTableFromLocalStorage();

  // Gắn sự kiện tìm kiếm
  document.getElementById("searchInput").addEventListener("input", filterTableRegex);
</script>
