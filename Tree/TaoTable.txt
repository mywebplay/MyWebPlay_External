<style>
  body {
    font-family: Arial, sans-serif;
    margin: 20px;
  }
  #searchInputs input[type="text"] {
    width: 100%;
    box-sizing: border-box;
    margin-bottom: 8px;
    padding: 6px 8px;
    font-size: 14px;
  }
  table {
    border-collapse: collapse;
    width: 100%;
    table-layout: fixed;
  }
  th, td {
    border: 1px solid #ccc;
    padding: 6px 8px;
    word-wrap: break-word;
    white-space: normal;
    text-align: left;
    vertical-align: top;
  }
  th.stt-col, td.stt-col {
    width: 5%;
    text-align: center;
  }
  #noData {
    font-style: italic;
    color: #888;
  }
</style>
</head>
<body>

<div id="searchInputs"></div>
<div id="tableContainer"></div>

<script>
(function(){
  // Lấy dữ liệu raw từ localStorage
  let rawData = localStorage.getItem("tableX");
  // Xóa localStorage luôn để tránh lỗi sau này
  localStorage.removeItem("tableX");

  if (!rawData || !rawData.trim()) {
    document.getElementById("tableContainer").innerHTML = '<div id="noData">Không có dữ liệu để hiển thị.</div>';
    return;
  }

  // Lưu dữ liệu gốc vào biến toàn cục để sử dụng sau
  window._originalData = rawData.trim();

  // Phân tích dữ liệu thành mảng dòng
  let rows = window._originalData.split(/\r?\n/);

  // Hàm escape html an toàn
  function escapeHTML(str) {
    return String(str)
      .replace(/&/g, "&amp;")
      .replace(/</g, "&lt;")
      .replace(/>/g, "&gt;")
      .replace(/"/g, "&quot;")
      .replace(/'/g, "&#039;");
  }

  // Tạo vùng input tìm kiếm dựa trên header
  function createSearchInputs(headers) {
    const container = document.getElementById("searchInputs");
    container.innerHTML = "";
    headers.forEach((col, i) => {
      // col là chuỗi header, vd: "Tên***10"
      let [text] = col.split("***");
      const input = document.createElement("input");
      input.type = "text";
      input.placeholder = `Tìm kiếm ${text.trim()}`;
      input.id = `searchCol${i}`;
      input.autocomplete = "off";

      // Thêm sự kiện onchange để lọc
      input.addEventListener("input", onSearchInput);

      container.appendChild(input);
    });
  }

  // Hàm tạo bảng, nhận mảng dòng raw (chuỗi tab phân cách cột)
  function renderTable(dataRows) {
    const container = document.getElementById("tableContainer");
    if (!dataRows || dataRows.length < 2) {
      container.innerHTML = '<div id="noData">Không có dữ liệu để hiển thị.</div>';
      return;
    }

    // Lấy header
    const headerCols = dataRows[0].split("\t");

    // Bắt đầu tạo table html
    let html = '<table><thead><tr>';
    // Cột STT
    html += '<th class="stt-col">STT</th>';
    // Các cột header với % width
    headerCols.forEach(col => {
      let [text, width] = col.split("***");
      width = width ? width.trim() : "";
      html += `<th style="width:${width}%">${escapeHTML(text.trim())}</th>`;
    });
    html += '</tr></thead><tbody>';

    // Các dòng dữ liệu
    for(let i=1; i<dataRows.length; i++) {
      if(!dataRows[i].trim()) continue;
      let cols = dataRows[i].split("\t");
      html += `<tr><td class="stt-col" style="text-align:center">${i}</td>`;
      for(let j=0; j<headerCols.length; j++) {
        let val = cols[j] || "";
        html += `<td>${escapeHTML(val)}</td>`;
      }
      html += '</tr>';
    }

    html += '</tbody></table>';
    container.innerHTML = html;
  }

  // Hàm xử lý lọc khi nhập input tìm kiếm
  function onSearchInput() {
    // Lấy từ khóa tìm kiếm từ các ô input
    const headers = rows[0].split("\t");
    const filters = headers.map((_, i) => {
      const val = document.getElementById(`searchCol${i}`).value.trim();
      return val;
    });

    // Nếu tất cả trống thì trả về dữ liệu gốc
    if(filters.every(f => f === "")) {
      renderTable(rows);
      return;
    }

    // Lọc dữ liệu: với mỗi dòng, nếu có ít nhất 1 cột chứa chuỗi tìm kiếm (regex nếu nhập được), giữ dòng đó
    let filtered = [rows[0]]; // giữ header
    for(let i=1; i<rows.length; i++) {
      let cols = rows[i].split("\t");
      let keep = false;
      for(let j=0; j<filters.length; j++) {
        if(!filters[j]) continue;
        try {
          // Tạo regex với i flag (ignore case)
          let re = new RegExp(filters[j], "i");
          if(re.test(cols[j] || "")) {
            keep = true;
            break; // thoát vòng for cột, vì chỉ cần 1 cột khớp
          }
        } catch(e) {
          // regex sai thì fallback dùng includes thường
          if((cols[j] || "").toLowerCase().includes(filters[j].toLowerCase())) {
            keep = true;
            break;
          }
        }
      }
      if(keep) filtered.push(rows[i]);
    }

    renderTable(filtered);
  }

  // Khởi tạo
  createSearchInputs(rows[0].split("\t"));
  renderTable(rows);

})();
</script>
