<style>
  body {
    font-family: Arial, sans-serif;
    margin: 20px;
  }
  #searchBox {
    width: 100%;
    padding: 8px;
    margin-bottom: 12px;
    box-sizing: border-box;
    font-size: 16px;
  }
  table {
    width: 100%;
    border-collapse: collapse;
    table-layout: fixed;
  }
  th, td {
    border: 1px solid #aaa;
    padding: 6px 8px;
    word-wrap: break-word;
    white-space: normal;
    text-align: left;
  }
  th.stt, td.stt {
    width: 5%;
    text-align: center;
  }
</style>
</head>
<body>

<input type="text" id="searchBox" placeholder="Tìm kiếm" autocomplete="off" />
<table id="dataTable"></table>

<script>
(function() {
  // Lấy dữ liệu từ localStorage và xoá luôn key
  const rawData = localStorage.getItem("tableX") || "";
  localStorage.removeItem("tableX");

  // Nếu không có dữ liệu thì không vẽ bảng
  if (!rawData.trim()) {
    document.getElementById('dataTable').innerHTML = '<tr><td>Không có dữ liệu để hiển thị</td></tr>';
    return;
  }

  function parseRawData(raw) {
    let lines = raw.trim().split(/\r?\n/);
    if (lines.length === 0) return { headers: [], data: [] };

    const headers = lines[0].split('\t').map(h => {
      const parts = h.split('***');
      return {
        name: parts[0].trim(),
        width: parseInt(parts[1]) || 10
      };
    });

    const data = lines.slice(1).map(line => line.split('\t'));
    return { headers, data };
  }

  function createSafeRegex(str) {
    try {
      return new RegExp(str, 'i');
    } catch {
      return /$^/;
    }
  }

  function renderTable(dataObj, filterRegex) {
    const { headers, data } = dataObj;
    const table = document.getElementById('dataTable');
    table.innerHTML = '';

    if (headers.length === 0) return;

    // Tạo thead
    const thead = table.createTHead();
    const trHead = thead.insertRow();

    // Thêm cột STT
    const thSTT = document.createElement('th');
    thSTT.textContent = 'STT';
    thSTT.className = 'stt';
    trHead.appendChild(thSTT);

    // Thêm cột header với width %
    headers.forEach(h => {
      const th = document.createElement('th');
      th.textContent = h.name;
      th.style.width = h.width + '%';
      trHead.appendChild(th);
    });

    // Tạo tbody
    const tbody = table.createTBody();
    let sttCount = 1;

    data.forEach(row => {
      if (filterRegex) {
        const match = row.some(cell => filterRegex.test(cell));
        if (!match) return;
      }

      const tr = tbody.insertRow();

      // STT
      const tdSTT = tr.insertCell();
      tdSTT.className = 'stt';
      tdSTT.textContent = sttCount++;

      // Dữ liệu các cột
      headers.forEach((_, i) => {
        const td = tr.insertCell();
        td.textContent = row[i] || '';
      });
    });
  }

  function handleSearch() {
    const val = document.getElementById('searchBox').value.trim();
    let regex = null;
    if (val.length > 0) {
      regex = createSafeRegex(val);
    }
    renderTable(parsedData, regex);
  }

  const parsedData = parseRawData(rawData);

  renderTable(parsedData);

  document.getElementById('searchBox').addEventListener('input', handleSearch);
})();
</script>
