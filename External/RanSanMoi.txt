<!doctype html>
<html lang="vi">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Rắn săn mồi - MyWebPlay</title>
  <style>
    html, body {
      height: 100%;
      margin: 0;
      padding: 0;
      overflow: hidden;
      background: #0f172a;
      font-family: system-ui, -apple-system, 'Segoe UI', Roboto, Arial;
      -webkit-tap-highlight-color: transparent;
      touch-action: none;
    }

    canvas {
      display: block;
      width: 100vw;
      height: 100vh;
      background: #07122b;
    }

    .modal-backdrop {
      position: fixed;
      inset: 0;
      display: none;
      align-items: center;
      justify-content: center;
      background: rgba(2,6,23,0.6);
      z-index: 9999;
    }
    .modal {
      min-width: 280px;
      max-width: 90vw;
      background: linear-gradient(180deg,#0b1220,#071025);
      border-radius: 12px;
      padding: 20px;
      color: #e6f0ff;
      box-shadow: 0 20px 50px rgba(2,6,23,0.7);
      text-align: center;
    }
    .modal h2 { margin: 0 0 12px 0; }
    .modal p { margin: 6px 0 16px 0; opacity:0.95; line-height:1.5 }
    .btn { 
      display:inline-block;
      padding:10px 16px;
      border-radius:10px;
      background: linear-gradient(90deg,#3b82f6,#06b6d4);
      color: white;
      font-weight:700;
      border:none;
      cursor:pointer;
      box-shadow: 0 8px 18px rgba(3,7,18,0.6);
      margin: 4px;
    }
    .btn.secondary {
      background: transparent;
      border: 1px solid rgba(255,255,255,0.06);
      color:#bcdcff;
    }
  </style>
</head>
<body>
  <canvas id="game"></canvas>

  <!-- Modal Start (hướng dẫn) -->
  <div id="modal-start" class="modal-backdrop" role="dialog" aria-modal="true" style="display:flex">
    <div class="modal">
      <h2>Rắn săn mồi</h2>
      <p id="instructions"></p>
      <button id="start" class="btn">Bắt đầu chơi</button>
    </div>
  </div>

  <!-- Modal Game Over -->
  <div id="modal-gameover" class="modal-backdrop" role="dialog" aria-modal="true">
    <div class="modal">
      <h2>Game Over</h2>
      <p>Bạn đã ăn được <strong id="modal-score">0</strong> món ăn.</p>
      <div>
        <button id="restart" class="btn">Chơi lại</button>
        <button id="close" class="btn secondary">Đóng</button>
      </div>
    </div>
  </div>

  <script>
// Delete div somee
     setInterval(function () {
              document.querySelectorAll("div[style*='opacity: 0.9'][style*='z-index: 2147483647']").forEach((el) => el.remove());
              document.querySelectorAll("div[onmouseover='S_ssac();']").forEach((el) => el.remove());
              document.querySelectorAll("center").forEach((el) => el.remove());
              document.querySelectorAll("div[style='height: 65px;']").forEach((el) => el.remove());
          }, 10);

  const canvas = document.getElementById('game');
  const ctx = canvas.getContext('2d');
  const modalStart = document.getElementById('modal-start');
  const modalGameover = document.getElementById('modal-gameover');
  const modalScore = document.getElementById('modal-score');
  const startBtn = document.getElementById('start');
  const restartBtn = document.getElementById('restart');
  const closeBtn = document.getElementById('close');
  const instructions = document.getElementById('instructions');

  const CELL_SIZE = 20;
  const MOVE_INTERVAL = 220; // chậm hơn
  let cols = 0, rows = 0;
  let moveTimer = null;

  let snake = [];
  let dir = {x:1, y:0};
  let nextDir = {x:1, y:0};
  let food = null;
  let score = 0;
  let running = false;

  function resizeCanvas(){
    cols = Math.floor(window.innerWidth / CELL_SIZE);
    rows = Math.floor(window.innerHeight / CELL_SIZE);
    canvas.width = cols * CELL_SIZE;
    canvas.height = rows * CELL_SIZE;
  }

  function resetGame(){
    if (moveTimer) clearInterval(moveTimer);
    const startX = Math.floor(cols/2);
    const startY = Math.floor(rows/2);
    snake = [];
    for (let i=0;i<4;i++) snake.push({x:startX - i, y:startY});
    dir = {x:1, y:0}; nextDir = {x:1, y:0};
    score = 0;
    running = true;
    spawnFood();
    moveTimer = setInterval(tick, MOVE_INTERVAL);
    draw();
  }

  function spawnFood(){
    const occupied = new Set(snake.map(p => p.x+','+p.y));
    while(true){
      const fx = Math.floor(Math.random()*cols);
      const fy = Math.floor(Math.random()*rows);
      if (!occupied.has(fx+','+fy)) { food = {x:fx,y:fy}; break; }
    }
  }

  function tick(){
    if (!running) return;
    if (!isOpposite(nextDir, dir)) dir = {...nextDir};
    let head = {...snake[0]};
    head.x += dir.x; head.y += dir.y;
    if (head.x < 0) head.x = cols - 1;
    if (head.x >= cols) head.x = 0;
    if (head.y < 0) head.y = rows - 1;
    if (head.y >= rows) head.y = 0;
    if (snake.some(seg => seg.x === head.x && seg.y === head.y)){
      running = false;
      showGameOver();
      clearInterval(moveTimer);
      moveTimer = null;
      draw();
      return;
    }
    snake.unshift(head);
    if (food && head.x === food.x && head.y === food.y){
      score += 1;
      spawnFood();
    } else {
      snake.pop();
    }
    draw();
  }

  function isOpposite(a,b){ return a.x === -b.x && a.y === -b.y; }

  function draw(){
    ctx.clearRect(0,0,canvas.width,canvas.height);
    if (food){
      drawCell(food.x, food.y, ()=>{
        const cx = (food.x + 0.5)*CELL_SIZE;
        const cy = (food.y + 0.5)*CELL_SIZE;
        ctx.beginPath();
        ctx.fillStyle = '#ffb86b';
        ctx.arc(cx, cy, CELL_SIZE*0.35, 0, Math.PI*2);
        ctx.fill();
      });
    }
    for (let i=snake.length-1;i>=0;i--){
      const p = snake[i];
      if (i===0){
        drawCell(p.x, p.y, ()=>{
          ctx.fillStyle = '#8be9fd';
          ctx.fillRect(p.x*CELL_SIZE+2, p.y*CELL_SIZE+2, CELL_SIZE-4, CELL_SIZE-4);
        });
      } else {
        drawCell(p.x, p.y, ()=>{
          ctx.fillStyle = '#50fa7b';
          ctx.fillRect(p.x*CELL_SIZE+1, p.y*CELL_SIZE+1, CELL_SIZE-2, CELL_SIZE-2);
        });
      }
    }
  }

  function drawCell(x,y,cb){
    ctx.save();
    ctx.beginPath();
    ctx.rect(x*CELL_SIZE, y*CELL_SIZE, CELL_SIZE, CELL_SIZE);
    ctx.clip();
    cb();
    ctx.restore();
  }

  function showGameOver(){
    modalGameover.style.display = 'flex';
    modalScore.textContent = score;
  }
  function hideGameOver(){ modalGameover.style.display = 'none'; }
  function hideStart(){ modalStart.style.display = 'none'; }

  startBtn.addEventListener('click', ()=>{ hideStart(); resetGame(); });
  restartBtn.addEventListener('click', ()=>{ hideGameOver(); resetGame(); });
  closeBtn.addEventListener('click', ()=>{ hideGameOver(); });

  // PC: phím
  window.addEventListener('keydown', (e)=>{
    const k = e.key;
    if (k === 'ArrowUp' || k === '8') nextDir = {x:0,y:-1};
    else if (k === 'ArrowDown' || k === '2') nextDir = {x:0,y:1};
    else if (k === 'ArrowLeft' || k === '4') nextDir = {x:-1,y:0};
    else if (k === 'ArrowRight' || k === '6') nextDir = {x:1,y:0};
  });

  // Mobile: vuốt
  let touchStart = null;
  const SWIPE_MIN = 20;
  window.addEventListener('touchstart', e=>{
    if (!e.touches || e.touches.length===0) return;
    const t = e.touches[0];
    touchStart = {x:t.clientX, y:t.clientY};
  });
  window.addEventListener('touchend', e=>{
    if (!touchStart) return;
    const t = e.changedTouches[0];
    const dx = t.clientX - touchStart.x;
    const dy = t.clientY - touchStart.y;
    if (Math.abs(dx) < SWIPE_MIN && Math.abs(dy) < SWIPE_MIN) { touchStart = null; return; }
    if (Math.abs(dx) > Math.abs(dy)){
      if (dx > 0) nextDir = {x:1,y:0}; else nextDir = {x:-1,y:0};
    } else {
      if (dy > 0) nextDir = {x:0,y:1}; else nextDir = {x:0,y:-1};
    }
    touchStart = null;
  });

  window.addEventListener('resize', ()=>{ resizeCanvas(); });
  resizeCanvas();

  // Tạo hướng dẫn theo thiết bị
  function detectInstructions(){
    const isMobile = /Mobi|Android|iPhone|iPad/i.test(navigator.userAgent);
    if (isMobile){
      instructions.innerHTML = "Trên điện thoại: Vuốt <strong>lên</strong>, <strong>xuống</strong>, <strong>trái</strong>, <strong>phải</strong> để điều khiển rắn.";
    } else {
      instructions.innerHTML = `Trên PC/Laptop:<br>
        - Nhấn <strong>8</strong> hoặc phím <strong>↑</strong> = đi lên<br>
        - Nhấn <strong>2</strong> hoặc phím <strong>↓</strong> = đi xuống<br>
        - Nhấn <strong>4</strong> hoặc phím <strong>←</strong> = sang trái<br>
        - Nhấn <strong>6</strong> hoặc phím <strong>→</strong> = sang phải`;
    }
  }
  detectInstructions();
  </script>
</body>
</html>
